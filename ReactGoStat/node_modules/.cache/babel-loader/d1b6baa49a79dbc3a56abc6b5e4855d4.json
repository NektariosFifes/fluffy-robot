{"ast":null,"code":"var _jsxFileName = \"/home/nek/WebstormProjects/fluffy-robot/ReactGoStat/src/components/FillBar/capacity.tsx\";\nimport React, { useMemo } from 'react';\nimport { ComponentWithDefaults as withDefaults } from '../UtilityModules/Wrappers/GetComponentItsDefaults';\nimport { useProportions } from '../UtilityModules/Statistics/calculations';\nimport useTheme from '../styles/use-theme';\nconst defaultProps = {\n  value: 0,\n  limit: 100,\n  color: '',\n  className: ''\n};\n\nconst getColor = (val, palette) => {\n  if (val < 33) return palette.cyan;\n  if (val < 66) return palette.warning;\n  return palette.errorDark;\n}; // eslint-disable-next-line react/prop-types\n\n\nconst Capacity = ({\n  value,\n  limit,\n  color: userColor,\n  className,\n  ...props\n}) => {\n  const theme = useTheme();\n  const percentValue = useProportions(value, limit);\n  const color = useMemo(() => {\n    if (userColor && userColor !== '') return userColor;\n    return getColor(percentValue, theme.palette);\n  }, [userColor, percentValue, theme.palette]);\n  return /*#__PURE__*/React.createElement(\"div\", Object.assign({\n    className: `capacity ${className}`,\n    title: `${percentValue}%`,\n    style: {\n      width: \"50px\",\n      height: \"10px\",\n      borderRadius: `${theme.layout.radius}`,\n      overflow: \"hidden\",\n      backgroundColor: `${theme.palette.accents_2}`\n    }\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      width: `${percentValue}%`,\n      backgroundColor: `${color}`,\n      height: `100%`,\n      margin: 0,\n      padding: 0,\n      display: 'block'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }));\n};\n\nconst MemoCapacity = React.memo(Capacity);\nexport default withDefaults(MemoCapacity, defaultProps);","map":{"version":3,"sources":["/home/nek/WebstormProjects/fluffy-robot/ReactGoStat/src/components/FillBar/capacity.tsx"],"names":["React","useMemo","ComponentWithDefaults","withDefaults","useProportions","useTheme","defaultProps","value","limit","color","className","getColor","val","palette","cyan","warning","errorDark","Capacity","userColor","props","theme","percentValue","width","height","borderRadius","layout","radius","overflow","backgroundColor","accents_2","margin","padding","display","MemoCapacity","memo"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,SAASC,qBAAqB,IAAIC,YAAlC,QAAsD,oDAAtD;AACA,SAASC,cAAT,QAA+B,2CAA/B;AAEA,OAAOC,QAAP,MAAqB,qBAArB;AAUA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,CADU;AAEjBC,EAAAA,KAAK,EAAE,GAFU;AAGjBC,EAAAA,KAAK,EAAE,EAHU;AAIjBC,EAAAA,SAAS,EAAE;AAJM,CAArB;;AAUA,MAAMC,QAAQ,GAAG,CAACC,GAAD,EAAcC,OAAd,KAAwD;AACrE,MAAID,GAAG,GAAG,EAAV,EAAc,OAAOC,OAAO,CAACC,IAAf;AACd,MAAIF,GAAG,GAAG,EAAV,EAAc,OAAOC,OAAO,CAACE,OAAf;AACd,SAAOF,OAAO,CAACG,SAAf;AACH,CAJD,C,CAMA;;;AACA,MAAMC,QAAiC,GAAG,CAAC;AAAEV,EAAAA,KAAF;AAASC,EAAAA,KAAT;AAAgBC,EAAAA,KAAK,EAAES,SAAvB;AAAkCR,EAAAA,SAAlC;AAA6C,KAAGS;AAAhD,CAAD,KAA6D;AACnG,QAAMC,KAAK,GAAGf,QAAQ,EAAtB;AACA,QAAMgB,YAAY,GAAGjB,cAAc,CAACG,KAAD,EAAQC,KAAR,CAAnC;AACA,QAAMC,KAAK,GAAGR,OAAO,CAAC,MAAM;AACxB,QAAIiB,SAAS,IAAIA,SAAS,KAAK,EAA/B,EAAmC,OAAOA,SAAP;AACnC,WAAOP,QAAQ,CAACU,YAAD,EAAeD,KAAK,CAACP,OAArB,CAAf;AACH,GAHoB,EAGlB,CAACK,SAAD,EAAYG,YAAZ,EAA0BD,KAAK,CAACP,OAAhC,CAHkB,CAArB;AAKA,sBACI;AAAK,IAAA,SAAS,EAAG,YAAWH,SAAU,EAAtC;AAAyC,IAAA,KAAK,EAAG,GAAEW,YAAa,GAAhE;AAAoE,IAAA,KAAK,EAAE;AACvEC,MAAAA,KAAK,EAAE,MADgE;AAEvEC,MAAAA,MAAM,EAAE,MAF+D;AAGvEC,MAAAA,YAAY,EAAG,GAAEJ,KAAK,CAACK,MAAN,CAAaC,MAAO,EAHkC;AAIvEC,MAAAA,QAAQ,EAAE,QAJ6D;AAKvEC,MAAAA,eAAe,EAAG,GAAER,KAAK,CAACP,OAAN,CAAcgB,SAAU;AAL2B;AAA3E,KAMOV,KANP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAOI;AAAM,IAAA,KAAK,EAAE;AACTG,MAAAA,KAAK,EAAG,GAAED,YAAa,GADd;AAETO,MAAAA,eAAe,EAAG,GAAEnB,KAAM,EAFjB;AAGTc,MAAAA,MAAM,EAAG,MAHA;AAITO,MAAAA,MAAM,EAAE,CAJC;AAKTC,MAAAA,OAAO,EAAE,CALA;AAMTC,MAAAA,OAAO,EAAE;AANA,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPJ,CADJ;AAkBH,CA1BD;;AA4BA,MAAMC,YAAY,GAAGjC,KAAK,CAACkC,IAAN,CAAWjB,QAAX,CAArB;AAEA,eAAed,YAAY,CAAC8B,YAAD,EAAe3B,YAAf,CAA3B","sourcesContent":["import React, { useMemo } from 'react';\nimport { ComponentWithDefaults as withDefaults } from '../UtilityModules/Wrappers/GetComponentItsDefaults';\nimport { useProportions } from '../UtilityModules/Statistics/calculations';\nimport { GeistUIThemesPalette } from '../styles/themes';\nimport useTheme from '../styles/use-theme';\nimport { NormalTypes } from '../UtilityModules/Types/Properties_Types';\n//\ninterface Props {\n    value?: number;\n    limit?: number;\n    color?: string;\n    className?: string;\n}\n\nconst defaultProps = {\n    value: 0,\n    limit: 100,\n    color: '',\n    className: '',\n};\n\ntype NativeAttrs = Omit<React.HTMLAttributes<any>, keyof Props>;\nexport type CapacityProps = Props & typeof defaultProps & NativeAttrs;\n\nconst getColor = (val: number, palette: GeistUIThemesPalette): string => {\n    if (val < 33) return palette.cyan;\n    if (val < 66) return palette.warning;\n    return palette.errorDark;\n};\n\n// eslint-disable-next-line react/prop-types\nconst Capacity: React.FC<CapacityProps> = ({ value, limit, color: userColor, className, ...props }) => {\n    const theme = useTheme();\n    const percentValue = useProportions(value, limit);\n    const color = useMemo(() => {\n        if (userColor && userColor !== '') return userColor;\n        return getColor(percentValue, theme.palette);\n    }, [userColor, percentValue, theme.palette]);\n\n    return (\n        <div className={`capacity ${className}`} title={`${percentValue}%`} style={{\n            width: \"50px\",\n            height: \"10px\",\n            borderRadius: `${theme.layout.radius}`,\n            overflow: \"hidden\",\n            backgroundColor: `${theme.palette.accents_2}`,\n        }} {...props}>\n            <span style={{\n                width: `${percentValue}%`,\n                backgroundColor: `${color}`,\n                height: `100%`,\n                margin: 0,\n                padding: 0,\n                display: 'block',\n            }}/>\n        </div>\n    );\n};\n\nconst MemoCapacity = React.memo(Capacity);\n\nexport default withDefaults(MemoCapacity, defaultProps);\n"]},"metadata":{},"sourceType":"module"}