{"ast":null,"code":"import { useMemo } from 'react';\n/**\n * Calculate the ratio of two numbers, maximum decimal length can be specified.\n *\n * (0, 100) => 0\n * (50, 100) => 50\n * (11.22, 100) => 11.22\n * (11.22, 100, 4) => 11.2200\n */\n\nexport const getProportions = (value, max, maxFixed = 2) => {\n  const val = value / max;\n  const couldBeDecimalValue = (Number.isNaN(val) ? 0 : val) * 100;\n  if (couldBeDecimalValue > 100) return 100;\n  if (couldBeDecimalValue < 0) return 0;\n  if (!`${couldBeDecimalValue}`.includes('.')) return couldBeDecimalValue;\n  const decimal = `${couldBeDecimalValue}`.split('.')[1];\n  if (decimal.length < maxFixed) return couldBeDecimalValue;\n  return +couldBeDecimalValue.toFixed(maxFixed);\n};\nexport const useProportions = (value, max, maxFixed = 2) => useMemo(() => getProportions(value, max, maxFixed), [value, max, maxFixed]);","map":{"version":3,"sources":["/home/nek/WebstormProjects/fluffy-robot/ReactGoStat/src/components/UtilityModules/Statistics/calculations.ts"],"names":["useMemo","getProportions","value","max","maxFixed","val","couldBeDecimalValue","Number","isNaN","includes","decimal","split","length","toFixed","useProportions"],"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,cAAc,GAAG,CAACC,KAAD,EAAgBC,GAAhB,EAA6BC,QAAgB,GAAG,CAAhD,KAA8D;AAC1F,QAAMC,GAAG,GAAGH,KAAK,GAAGC,GAApB;AACA,QAAMG,mBAAmB,GAAG,CAACC,MAAM,CAACC,KAAP,CAAaH,GAAb,IAAoB,CAApB,GAAwBA,GAAzB,IAAgC,GAA5D;AACA,MAAIC,mBAAmB,GAAG,GAA1B,EAA+B,OAAO,GAAP;AAC/B,MAAIA,mBAAmB,GAAG,CAA1B,EAA6B,OAAO,CAAP;AAC7B,MAAI,CAAE,GAAEA,mBAAoB,EAAvB,CAAyBG,QAAzB,CAAkC,GAAlC,CAAL,EAA6C,OAAOH,mBAAP;AAE7C,QAAMI,OAAO,GAAI,GAAEJ,mBAAoB,EAAvB,CAAyBK,KAAzB,CAA+B,GAA/B,EAAoC,CAApC,CAAhB;AACA,MAAID,OAAO,CAACE,MAAR,GAAiBR,QAArB,EAA+B,OAAOE,mBAAP;AAE/B,SAAO,CAACA,mBAAmB,CAACO,OAApB,CAA4BT,QAA5B,CAAR;AACD,CAXM;AAaP,OAAO,MAAMU,cAAc,GAAG,CAACZ,KAAD,EAAgBC,GAAhB,EAA6BC,QAAgB,GAAG,CAAhD,KAC5BJ,OAAO,CAAC,MAAMC,cAAc,CAACC,KAAD,EAAQC,GAAR,EAAaC,QAAb,CAArB,EAA6C,CAACF,KAAD,EAAQC,GAAR,EAAaC,QAAb,CAA7C,CADF","sourcesContent":["import { useMemo } from 'react'\n\n/**\n * Calculate the ratio of two numbers, maximum decimal length can be specified.\n *\n * (0, 100) => 0\n * (50, 100) => 50\n * (11.22, 100) => 11.22\n * (11.22, 100, 4) => 11.2200\n */\nexport const getProportions = (value: number, max: number, maxFixed: number = 2): number => {\n  const val = value / max\n  const couldBeDecimalValue = (Number.isNaN(val) ? 0 : val) * 100\n  if (couldBeDecimalValue > 100) return 100\n  if (couldBeDecimalValue < 0) return 0\n  if (!`${couldBeDecimalValue}`.includes('.')) return couldBeDecimalValue\n\n  const decimal = `${couldBeDecimalValue}`.split('.')[1]\n  if (decimal.length < maxFixed) return couldBeDecimalValue\n\n  return +couldBeDecimalValue.toFixed(maxFixed)\n}\n\nexport const useProportions = (value: number, max: number, maxFixed: number = 2) =>\n  useMemo(() => getProportions(value, max, maxFixed), [value, max, maxFixed])\n"]},"metadata":{},"sourceType":"module"}