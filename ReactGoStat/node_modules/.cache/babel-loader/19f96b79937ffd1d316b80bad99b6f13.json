{"ast":null,"code":"var _jsxFileName = \"/home/nek/WebstormProjects/fluffy-robot/ReactGoStat/src/components/TextPractical/TextComp.tsx\";\nimport React, { useMemo } from 'react';\nimport { ComponentWithDefaults } from '../UtilityModules';\nimport '../styles/TextStyles.scss';\nimport { default as TextSubComponent1 } from './TextSubComp1';\n//\nconst DefaultProperties = {\n  size: 15,\n  a: false\n};\n\nfunction GetComponentChildren(children, inlineComp, size) {\n  if (!inlineComp.length) return /*#__PURE__*/React.createElement(TextSubComponent1, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 36\n    }\n  }, children);\n  const NextChildComp = inlineComp.slice(1, inlineComp.length);\n  const ThisComp = inlineComp[0];\n  return /*#__PURE__*/React.createElement(ThisComp, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 12\n    }\n  }, GetComponentChildren(children, NextChildComp, size));\n}\n\nfunction TextComp(props) {\n  const {\n    size,\n    a,\n    preset,\n    additionalClass,\n    highlight,\n    typographyPreset,\n    children\n  } = props;\n  const AvailableAppendableElements = {\n    preset: preset,\n    highlight: highlight,\n    typographyPreset: typographyPreset,\n    additionalClass: additionalClass,\n    size\n  };\n  const AvailableAppendableInlineElements = {\n    a\n  };\n  const AppendblePresetsSanitized = Object.keys(AvailableAppendableElements).filter(element => {\n    const Index = element;\n    return AvailableAppendableElements[Index];\n  });\n  const AppendbleInlineElementsSanitized = Object.keys(AvailableAppendableInlineElements).filter(element => {\n    const Index = element;\n    return AvailableAppendableInlineElements[Index];\n  });\n  const CompName = useMemo(() => {\n    if (AppendblePresetsSanitized[0]) return AppendbleInlineElementsSanitized[0];\n    if (AppendbleInlineElementsSanitized[0]) return AppendbleInlineElementsSanitized[0];\n    return 'p';\n  }, [AppendblePresetsSanitized, AppendbleInlineElementsSanitized]);\n  const childrenElem = useMemo(() => {\n    if (!AppendbleInlineElementsSanitized.length) return children;\n    return GetComponentChildren(children, AppendbleInlineElementsSanitized, size);\n  }, [AppendbleInlineElementsSanitized, children, size]);\n  return /*#__PURE__*/React.createElement(TextSubComponent1, {\n    typographyPreset: typographyPreset,\n    preset: preset,\n    highlight: highlight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, childrenElem);\n}\n\nconst MemoizedComponent = React.memo(TextComp);\nexport default ComponentWithDefaults(MemoizedComponent, DefaultProperties);","map":{"version":3,"sources":["/home/nek/WebstormProjects/fluffy-robot/ReactGoStat/src/components/TextPractical/TextComp.tsx"],"names":["React","useMemo","ComponentWithDefaults","default","TextSubComponent1","DefaultProperties","size","a","GetComponentChildren","children","inlineComp","length","NextChildComp","slice","ThisComp","TextComp","props","preset","additionalClass","highlight","typographyPreset","AvailableAppendableElements","AvailableAppendableInlineElements","AppendblePresetsSanitized","Object","keys","filter","element","Index","AppendbleInlineElementsSanitized","CompName","childrenElem","MemoizedComponent","memo"],"mappings":"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","sourcesContent":["import React, { ReactElement, ReactNode, useMemo } from 'react';\nimport { ComponentWithDefaults } from '../UtilityModules';\nimport '../styles/TextStyles.scss';\nimport { default as TextSubComponent1 } from './TextSubComp1';\nimport { TextTypographyPresets, HighlightStyles, TextPresetStyles } from '../UtilityModules/Types/Properties_Types';\n\ninterface ComponentProps {\n    typographyPreset?: TextTypographyPresets;\n    highlight?: HighlightStyles;\n    preset?: TextPresetStyles;\n    additionalClass?: string;\n    size?: number | string;\n    a?: boolean;\n    marker?: boolean;\n}\n//\nconst DefaultProperties = {\n    size: 15,\n    a: false,\n};\n\ntype ElementTypes = ComponentProps;\n\ntype BasicHtmlAttributes = Omit<React.HTMLAttributes<any>, keyof ComponentProps>;\n\nexport type TextCompProps = typeof DefaultProperties & ComponentProps & BasicHtmlAttributes;\n\ntype HtmlElementsList = { [key in keyof JSX.IntrinsicElements]?: boolean };\n\ntype AppendableInlineElements = Array<keyof JSX.IntrinsicElements>;\nfunction GetComponentChildren(\n    children: ReactNode | ReactElement,\n    inlineComp: AppendableInlineElements,\n    size?: string | number,\n) {\n    if (!inlineComp.length) return <TextSubComponent1>{children}</TextSubComponent1>;\n    const NextChildComp = inlineComp.slice(1, inlineComp.length);\n    const ThisComp = inlineComp[0];\n    return <ThisComp>{GetComponentChildren(children, NextChildComp, size)}</ThisComp>;\n}\n\nexport type PresetsArray = Array<TextPresetStyles>;\n\nexport type HighlightStylesArray = Array<HighlightStyles>;\n\nexport type TypographyPresets = Array<TextTypographyPresets>;\n\ntype PropsArray = Array<keyof ComponentProps>;\ntype InlinePropsArray = Array<keyof JSX.IntrinsicElements>;\nfunction TextComp(props: React.PropsWithChildren<TextCompProps>) {\n    const { size, a, preset, additionalClass, highlight, typographyPreset, children } = props;\n    const AvailableAppendableElements: ElementTypes = {\n        preset: preset,\n        highlight: highlight,\n        typographyPreset: typographyPreset,\n        additionalClass: additionalClass,\n        size,\n    };\n    const AvailableAppendableInlineElements: ElementTypes = {\n        a,\n    };\n\n    const AppendblePresetsSanitized = Object.keys(AvailableAppendableElements).filter((element) => {\n        const Index = element as keyof ElementTypes;\n        return AvailableAppendableElements[Index];\n    }) as PresetsArray;\n\n    const AppendbleInlineElementsSanitized = Object.keys(AvailableAppendableInlineElements).filter(\n        (element: string) => {\n            const Index = element as keyof ElementTypes;\n            return AvailableAppendableInlineElements[Index];\n        },\n    ) as InlinePropsArray;\n\n    const CompName = useMemo(() => {\n        if (AppendblePresetsSanitized[0]) return AppendbleInlineElementsSanitized[0];\n        if (AppendbleInlineElementsSanitized[0]) return AppendbleInlineElementsSanitized[0];\n        return 'p' as keyof JSX.IntrinsicElements;\n    }, [AppendblePresetsSanitized, AppendbleInlineElementsSanitized]);\n\n    const childrenElem = useMemo(() => {\n        if (!AppendbleInlineElementsSanitized.length) return children;\n        return GetComponentChildren(children, AppendbleInlineElementsSanitized, size);\n    }, [AppendbleInlineElementsSanitized, children, size]);\n\n    return (\n        <TextSubComponent1 typographyPreset={typographyPreset} preset={preset} highlight={highlight}>\n            {childrenElem}\n        </TextSubComponent1>\n    );\n}\n\nconst MemoizedComponent = React.memo(TextComp);\n\nexport default ComponentWithDefaults(MemoizedComponent, DefaultProperties);\n"]},"metadata":{},"sourceType":"module"}